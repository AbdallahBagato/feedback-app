# Starter pipeline

## It trigger the Pipeline when commit in main branch. 
trigger:
  branches:
    include:
    - main

pool: 
  name: Self-Hosted-AWS

variables:
  dockerHub: 'bagato220'
  dockerRegistryServiceConnection: 'docker-service-conn'         ## It Created To can Auth with Github 
 

## Have Multi Enviroment in name space as Dev and Stagging and prod
parameters:
- name: environmet
  type: string
  default: dev
  values:
  - dev
  - stagging
  - prod


## Create The Two Stage For The CI and CD 
### In Each Stage Divide two Job then Steps 
stages:
  - stage: CI_Stage # name of the stage, A-Z, a-z, 0-9, and underscore
    displayName: CI_Stage  # friendly name to display in the UI
    jobs: 
    - job: Lint
      displayName: Linting Backend
      steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
          addToPath: true       ## It by default True 
     ## Use Scripts to Run the Linting Command make Vitrtual env  and use flake8 for Linting
      - script: |
          python3.9 -m venv .venv
          source .venv/bin/activate
          pip install flake8
          flake8 src/feedback_backend/app.py
        displayName: 'Run_Linting'
        ## Every Job is Need to Clone Jobs becouse after finish it it Remove The Repo 

    - job: Test
      displayName: Unit Test For Backend
      dependsOn: Lint
      steps:
      - checkout: self  
      - script: |
          python3.9 -m venv .venv
          source .venv/bin/activate
          pip install -r src/feedback_backend/requirements.txt
          pip install pytest
          export PYTHONPATH=$(Build.SourcesDirectory)/src:$PYTHONPATH
          pytest tests/
        displayName: 'Run_unit_Test' 
        workingDirectory: $(Build.SourcesDirectory)         ## PreDefined Variables  Defiend The cd To the cloned Repo 
    
    - job: Build
      displayName: Build Docker Image and Push
      dependsOn: [Lint,Test]
      steps:
      - checkout: self
      - task: Docker@2
        displayName: Build & Push Image backend
        inputs:
          containerRegistry: $(dockerRegistryServiceConnection)         ##Define The Docker Registery 
          repository: $(dockerHub)/feedback-backend
          command: buildAndPush
          Dockerfile: 'src/feedback_backend/Dockerfile'
          tags: $(Build.BuildId)
          buildContext: '$(Build.SourcesDirectory)/src/feedback_backend'

      - task: Docker@2
        displayName: Build & Push Front End Image Front End
        inputs:
          containerRegistry: $(dockerRegistryServiceConnection)         ##Define The Docker Registery 
          repository: $(dockerHub)/feedback-frontend
          command: buildAndPush
          Dockerfile: 'src/feedback_frontend/src/Dockerfile'
          tags: $(Build.BuildId)
          buildContext: '$(Build.SourcesDirectory)/src/feedback_frontend'


    
  - stage: CD_Stage 
    displayName: CD_Stage  
    dependsOn: CI_Stage
    jobs:
    - deployment: Deploy_to_env 
      displayName: Change_in_Yaml
      environment: ${{ parameters.environmet }}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self 
            - task: replacetokens@6
              displayName: Change_Image
              inputs:
              ## Change The Pattern to the New Docker Image in Deployement File 
                rootDirectory: '$(Build.SourcesDirectory)/k8s'
                sources: "**/*.yaml"
                tokenpattern: custom
                tokenPrefix: '${'
                tokenSuffix: '}'


            - task: AWSShellScript@1
              displayName: Login_To_EKS
              inputs:
                awsCredentials: 'my-aws-connection'
                regionName: 'us-east-1'
                scriptType: 'inline'
                inlineScript: |
                  echo "Login To EKS Cluster"
                  aws eks update-kubeconfig \
                  --region us-east-1 \
                  --name EKS_Cluster

            - script: | 
                kubectl apply -f $(Build.SourcesDirectory)/k8s -n ${{ parameters.environmet }}
              displayName: Deploy To Eks Cluster

